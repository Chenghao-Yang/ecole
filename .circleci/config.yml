version: 2.1

# Environments where jobs are executed
executors:

  # Run inside a conda environment in our custom Docker image
  ecole_conda:
    docker:
      - image: ecoleai/ci
    parameters:
      environment:
        type: string
        default: ecole-py3.8
    shell: conda run -n <<parameters.environment>> /bin/bash -c


# Reusable set of instructions to be used in jobs
commands:

  # Build the entire project
  build_ecole:
    parameters:
      source_dir:
        type: string
        default: "."
      build_dir:
        type: string
        default: build
      compiler:
        type: enum
        enum: ["gcc", "clang"]
        default: "gcc"
      cmake_options:
        type: string
        default: ""
      target:
        type: string
        default: all
    description: "Compiling the Ecole project"
    steps:
      - restore_cache:
          keys:
            - &conan_cache_key >-
              conan-v1.1-{{
              arch }}-{{
              checksum "libecole/conanfile.txt" }}-{{
              checksum "libecole/tests/conanfile.txt" }}
            - conan-v1.1-{{ arch }}-
      - run:
          name: "Set compiler"
          command: |
            if [[ <<parameters.compiler>> == "clang" ]]; then
              echo "export CC=$(which clang)" >> $BASH_ENV
              echo "export CXX=$(which clang++)" >> $BASH_ENV
            fi
      - run:
          name: "CMake configure"
          environment:
            CONAN_USER_HOME: &conan_cache_dir /cache/conan
          command: >
            cmake -S <<parameters.source_dir>> -B <<parameters.build_dir>>
            -D CMAKE_TOOLCHAIN_FILE="${PWD}/.circleci/conda.cmake"
            -D CMAKE_BUILD_TYPE=Release -D BUILD_TESTING=ON
            <<parameters.cmake_options>>
      - save_cache:
          key: *conan_cache_key
          paths:
            - *conan_cache_dir
      - run:
          name: "CMake build"
          command: cmake --build build --target <<parameters.target>>


# Execute a set of commands in a clean executor
jobs:

  build_test:
    parameters:
      python:
        type: string
        default: "3.8"
      compiler:
        type: enum
        enum: ["gcc", "clang"]
        default: "gcc"
      cmake_options:
        type: string
        default: ""
    executor:
      name: ecole_conda
      environment: "ecole-py<<parameters.python>>"
    steps:
      - checkout
      - build_ecole:
          compiler: "<<parameters.compiler>>"
          cmake_options: "<<parameters.cmake_options>>"
      - run:
          name: "Test libecole"
          command: ./build/libecole/tests/test-libecole
      - run:
          name: "Install Python ecole"
          command: python3 -m pip install -I build/python
      - run:
          name: "Test Python ecole"
          command: python3 -m pytest python/tests

  sanitize:
    parameters:
      sanitizer:
        type: enum
        enum: ["THREAD", "ADDRESS", "MEMORY", "UNDEFINED"]
    executor: ecole_conda
    steps:
      - checkout
      - build_ecole:
          cmake_options: "-D SANITIZE_<<parameters.sanitizer>>=ON"
      - run:
          name: "Test libecole"
          command: ./build/libecole/tests/test-libecole
        # Python library cannot be sanitized so far

  static_analysis:
    executor:
      name: ecole_conda
    steps:
      - checkout
      - build_ecole:
          cmake_options: "-D ENABLE_CLANG_TIDY=ON"

  check_format:
    executor: ecole_conda
    steps:
      - checkout
      - run:
          name: "Check C++ formatting"
          command: |
            for file in $(find libecole python -name '*.[hc]pp'); do
              [ $? -eq 0 ] && clang-format --style=file "$file" | diff - "$file"
            done
      - run:
          name: "Check Python formatting"
          command: python3 -m black --check python/

  build_doc:
    executor: ecole_conda
    steps:
      - checkout
      - build_ecole:
          cmake_options: "-D ENABLE_DOCUMENTATION=ON"
      - run:
          name: "Generate documentation"
          command: cmake --build build --target ecole-sphinx


workflows:
  continuous_testing:
    jobs:
      - check_format
      - build_test:
          name: build_py38
          python: "3.8"
      - build_test:
          name: build_py37
          python: "3.7"
          requires:
            - build_py38
      - build_test:
          name: build_py36
          python: "3.6"
          requires:
            - build_py38
      - build_test:
          name: build_clang
          compiler: clang
          requires:
            - build_py38
      - sanitize:
          name: build_asan
          sanitizer: "ADDRESS"
          requires:
            - build_py38
      - static_analysis:
          requires:
            - build_py38
      - build_doc:
          requires:
            - build_py38
